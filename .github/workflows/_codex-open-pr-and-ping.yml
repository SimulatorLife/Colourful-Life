name: Codex â€“ Open PR and Ping

on:
  workflow_call:
    inputs:
      pr_title:
        required: true
        type: string
      pr_body:
        required: false
        type: string
        default: ""
      prompt:
        required: true
        type: string
      branch_prefix:
        required: false
        type: string
        default: "codex"
      base_branch:
        required: false
        type: string
        default: "master"
    outputs:
      pr_number:
        value: ${{ jobs.open_and_ping.outputs.pr_number }}
      branch:
        value: ${{ jobs.open_and_ping.outputs.branch }}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  open_and_ping:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.pr.outputs.number }}
      branch: ${{ env.BRANCH_NAME }}
    env:
      BRANCH_NAME: ${{ inputs.branch_prefix }}/task-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create empty commit on new branch (from latest base)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Ensure we're up to date and branch from the current base tip
          git fetch origin "$BASE_BRANCH"
          git switch -c "$BRANCH_NAME" "origin/$BASE_BRANCH"

          git commit --allow-empty -m "${{ inputs.pr_title }}"
          git push -u origin "$BRANCH_NAME"

      - name: Open PR
        id: pr
        uses: actions/github-script@v7
        env:
          PR_TITLE:    ${{ inputs.pr_title }}
          PR_BODY:     ${{ inputs.pr_body }}
          BASE_BRANCH: ${{ inputs.base_branch }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        with:
          github-token: ${{ secrets.GH_USER_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              title: process.env.PR_TITLE,
              head:  process.env.BRANCH_NAME,
              base:  process.env.BASE_BRANCH,
              body:  process.env.PR_BODY || undefined,
              maintainer_can_modify: true,
            });
            core.setOutput('number', pr.number.toString());
            core.setOutput('head_sha', pr.head.sha);

      - name: (Optional) Label the PR
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number('${{ steps.pr.outputs.number }}'),
                labels: ['codex'],
              });
            } catch (e) {
              core.info('Label add skipped: ' + e.message);
            }

      - name: Comment to trigger Codex (includes branch & PR metadata)
        uses: actions/github-script@v7
        env:
          BASE_BRANCH: ${{ inputs.base_branch }}
          PROMPT:      ${{ inputs.prompt }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          PR_NUMBER:   ${{ steps.pr.outputs.number }}
          HEAD_SHA:    ${{ steps.pr.outputs.head_sha }}
        with:
          github-token: ${{ secrets.GH_USER_TOKEN }}
          script: |
            const prNumber = Number(process.env.PR_NUMBER);
            const body = [
              "@codex",
              "",
              "### Task Context",
              "```yaml",
              "codex_task:",
              `  branch: "${process.env.BRANCH_NAME}"`,
              `  pr_number: ${prNumber}`,
              `  base: "${process.env.BASE_BRANCH}"`,
              `  head_sha: "${process.env.HEAD_SHA}"`,
              "```",
              "",
              "### Instructions",
              "Use the branch and PR shown above for all changes. Commit code only to that branch,",
              "and ensure updates remain tied to this PR. Do not open new PRs or branches unless",
              "explicitly instructed.",
              "",
              "```",
              process.env.PROMPT,
              "```",
            ].join("\n");

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: prNumber,
              body,
            });
