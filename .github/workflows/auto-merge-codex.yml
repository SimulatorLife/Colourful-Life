name: Auto-merge Codex PRs

on:
  # Re-check when the PR changes or new commits arrive
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [master]

  # Optional: when CI finishes on the PR, try again
  check_suite:
    types: [completed]

permissions:
  contents: write         # needed to merge and delete branches
  pull-requests: write

jobs:
  auto-merge:
    # For pull_request events, github.head_ref is the source branch name
    if: ${{ github.event_name != 'check_suite' || startsWith(github.event.pull_request.head.ref, 'codex') }}
    runs-on: ubuntu-latest

    steps:
      - name: Get PR (for check_suite trigger)
        if: ${{ github.event_name == 'check_suite' }}
        uses: actions/github-script@v7
        id: find_pr
        with:
          script: |
            // When triggered by check_suite, we need to discover the PRs for this HEAD SHA
            const sha = context.payload.check_suite.head_sha;
            const { data: prs } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} type:pr is:open head:${sha}`
            });
            if (prs.items.length === 0) return { pr_number: null };
            return { pr_number: prs.items[0].number };

      - name: Load PR details
        uses: actions/github-script@v7
        id: pr
        with:
          script: |
            const prNumber = context.eventName === 'pull_request'
              ? context.payload.pull_request.number
              : (core.getInput('pr_number') || '${{ steps.find_pr.outputs.pr_number }}');

            if (!prNumber) {
              core.setOutput('skip', 'true');
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: Number(prNumber),
            });

            core.setOutput('skip', 'false');
            core.setOutput('number', pr.number.toString());
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('draft', pr.draft ? 'true' : 'false');

      - name: Bail if not a codex -> master PR
        if: ${{ steps.pr.outputs.skip != 'true' && ( !startsWith(steps.pr.outputs.head_ref, 'codex') || steps.pr.outputs.base_ref != 'master' ) }}
        run: echo "Not a codex* -> master PR; skipping."

      - name: Wait for mergeability calculation
        if: ${{ steps.pr.outputs.skip != 'true' && startsWith(steps.pr.outputs.head_ref, 'codex') && steps.pr.outputs.base_ref == 'master' }}
        uses: actions/github-script@v7
        id: readiness
        with:
          script: |
            if ('${{ steps.pr.outputs.draft }}' === 'true') {
              core.setOutput('ready', 'false');
              core.notice('PR is a draft; not merging.');
              return;
            }

            const prNumber = Number('${{ steps.pr.outputs.number }}');

            // mergeable can be null immediately after events; poll briefly
            let last = null;
            for (let i = 0; i < 10; i++) {
              const { data } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              last = data;
              if (data.mergeable !== null) break;
              await new Promise(r => setTimeout(r, 2000));
            }

            // mergeable == true and mergeable_state 'clean' â†’ no conflicts & checks satisfied
            const ok = !!last?.mergeable && last?.mergeable_state === 'clean' && !last?.draft;

            core.setOutput('ready', ok ? 'true' : 'false');
            core.setOutput('head_ref', last.head.ref);

      - name: Merge PR
        if: ${{ steps.readiness.outputs.ready == 'true' }}
        uses: actions/github-script@v7
        id: merge
        with:
          script: |
            const prNumber = Number('${{ steps.pr.outputs.number }}');
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',   // or 'merge' / 'rebase'
              });
              core.setOutput('merged', 'true');
            } catch (e) {
              core.setOutput('merged', 'false');
              core.warning(`Merge attempt failed: ${e.message}`);
            }

      - name: Delete branch
        if: ${{ steps.merge.outputs.merged == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const ref = 'heads/${{ steps.readiness.outputs.head_ref }}';
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
              });
            } catch (e) {
              core.warning(`Branch deletion failed: ${e.message}`);
            }
