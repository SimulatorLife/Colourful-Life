name: Auto-merge Codex PRs

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [master]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge:
    # For pull_request events, github.head_ref is the source branch name
    if: ${{ github.event_name != 'check_suite' || startsWith(github.event.pull_request.head.ref, 'codex') }}
    runs-on: ubuntu-latest

    steps:
      - name: Get PR (for check_suite trigger)
        if: ${{ github.event_name == 'check_suite' }}
        uses: actions/github-script@v7
        id: find_pr
        with:
          script: |
            const sha = context.payload.check_suite.head_sha;
            const { data: prs } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} type:pr is:open ${sha}`
            });
            if (prs.items.length === 0) return { pr_number: null };
            return { pr_number: prs.items[0].number };

      - name: Load PR details
        uses: actions/github-script@v7
        id: pr
        with:
          script: |
            const prNumber = context.eventName === 'pull_request'
              ? context.payload.pull_request.number
              : (core.getInput('pr_number') || '${{ steps.find_pr.outputs.pr_number }}');

            if (!prNumber) {
              core.setOutput('skip', 'true');
              return;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: Number(prNumber),
            });

            core.setOutput('skip', 'false');
            core.setOutput('number', pr.number.toString());
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('draft', pr.draft ? 'true' : 'false');

      - name: Bail if not a codex -> master PR
        if: ${{ steps.pr.outputs.skip != 'true' && ( !startsWith(steps.pr.outputs.head_ref, 'codex') || steps.pr.outputs.base_ref != 'master' ) }}
        run: echo "Not a codex* -> master PR; skipping."

      - name: Wait for mergeability calculation
        if: ${{ steps.pr.outputs.skip != 'true' && startsWith(steps.pr.outputs.head_ref, 'codex') && steps.pr.outputs.base_ref == 'master' }}
        uses: actions/github-script@v7
        id: readiness
        with:
          script: |
            if ('${{ steps.pr.outputs.draft }}' === 'true') {
              core.setOutput('ready', 'false');
              core.setOutput('reason', 'draft');
              core.notice('PR is a draft; not merging.');
              return;
            }

            const prNumber = Number('${{ steps.pr.outputs.number }}');

            let last = null;
            for (let i = 0; i < 10; i++) {
              const { data } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              last = data;
              if (data.mergeable !== null) break;
              await new Promise(r => setTimeout(r, 2000));
            }

            const mergeable = !!last?.mergeable;
            const state = last?.mergeable_state || 'unknown';
            const draft = !!last?.draft;

            // clean → mergeable without conflicts and required checks ok
            const ready = mergeable && state === 'clean' && !draft;

            core.notice(`mergeable=${mergeable}, mergeable_state=${state}, draft=${draft}`);
            core.setOutput('ready', ready ? 'true' : 'false');
            core.setOutput('mergeable', mergeable ? 'true' : 'false');
            core.setOutput('state', state);
            core.setOutput('head_ref', last.head.ref);

      - name: Merge PR
        if: ${{ steps.readiness.outputs.ready == 'true' }}
        uses: actions/github-script@v7
        id: merge
        with:
          script: |
            const prNumber = Number('${{ steps.pr.outputs.number }}');
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',   // or 'merge' / 'rebase'
              });
              core.setOutput('merged', 'true');
              core.notice('PR merged successfully.');
            } catch (e) {
              core.setOutput('merged', 'false');
              core.warning(`Merge attempt failed: ${e.message}`);
            }

      - name: Delete branch
        if: ${{ steps.merge.outputs.merged == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const ref = 'heads/${{ steps.readiness.outputs.head_ref }}';
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
              });
              core.notice(`Deleted branch ${ref}.`);
            } catch (e) {
              core.warning(`Branch deletion failed: ${e.message}`);
            }

      # Diagnostics when not merged + comment for the agent
      - name: Diagnostics and codex comment (when merge blocked)
        if: ${{ steps.pr.outputs.skip != 'true' && ( steps.readiness.outputs.ready != 'true' ) }}
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number('${{ steps.pr.outputs.number }}');

            // Re-fetch fresh snapshot for better diagnostics
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: prNumber
            });

            // Minimal diagnostics
            const diag = [
              `mergeable: ${pr.mergeable}`,
              `mergeable_state: ${pr.mergeable_state}`,
              `draft: ${pr.draft}`,
              `rebaseable: ${pr.rebaseable}`,
              `commits: ${pr.commits}`,
              `changed_files: ${pr.changed_files}`
            ].join('\n');

            core.notice(`Diagnostics:\n${diag}`);

            const condensed = [
              "Resolve conflicts while preserving master’s architecture, tests, and style.",
              "Keep the PR’s useful intent; avoid duplication and deprecated code.",
              "Prefer master for configs/CI; re-apply only necessary changes.",
              "For deps/locks: take master, then add needed deps and regenerate cleanly.",
              "Refactor minimally; keep changes small and DRY; no loss of coverage.",
              "Run formatters/linters/tests; fix failures at the source.",
              "Commit in small, logical slices; update tests when behavior changes.",
              "Goal: a clean, behavior-correct merge with green tests and no regressions."
            ].join(' ');

            const body = [
              "@codex fix the merge conflicts and attempt an auto-resolution.",
              "",
              "**Context**",
              "",
              "- This PR could not be auto-merged because it isn’t in a `clean` state.",
              "- Diagnostics:",
              "```",
              diag,
              "```",
              "",
              "**Instructions (condensed)**",
              "",
              "```",
              condensed,
              "```"
            ].join("\n");

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });
