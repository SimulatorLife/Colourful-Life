name: Codex 24 – Simplify

on:
  schedule:
    - cron: "35 0 * * *" # early run at 00:35 UTC (fills 00:20–00:50 gap)
    - cron: "40 3,9,15,21 * * *" # existing runs at 03:40, 09:40, 15:40, 21:40 UTC
    - cron: "50 6 * * *" # morning run at 06:50 UTC (fills 06:40–07:00 gap)
    - cron: "45 11 * * *" # midday run at 11:45 UTC (fills 11:15–12:00 gap)
    - cron: "50 18 * * *" # evening run at 18:50 UTC (fills 18:40–19:00 gap)
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  run:
    uses: ./.github/workflows/_codex-open-pr-and-ping.yml
    secrets: inherit
    with:
      pr_title: "Codex: Simplify Code Paths"
      pr_body: "Seed PR for Codex to streamline explicit logic while preserving existing behavior."
      prompt: |
        Identify one area of the codebase (a function, small module, or tight code path)
        that is overly explicit, verbose, or manually step-by-step, and condense it by
        using existing project utilities or language/framework built-ins—without
        changing behavior. This may include replacing hand-rolled loops, conditionals,
        parsing, cloning, formatting, state updates, or error checks with well-named
        helpers already in the codebase or idiomatic primitives (e.g., array/collection
        methods, standard library APIs); removing redundant local wrappers superseded by
        those helpers; unifying duplicate logic behind a single call site; or
        eliminating unnecessary intermediate variables. You must always produce at least
        one code change that simplifies or condenses something. Do not ever return with
        “no changes needed” or similar; if large opportunities are absent, make a small
        but concrete simplification instead (e.g., collapse two lines into one idiomatic
        call, inline an unnecessary temporary, or switch a manual loop to a single
        helper). Keep readability first: shorter code must be clearer, not clever. Limit
        scope to the chosen area, avoid architectural changes and new dependencies, and
        preserve public interfaces. In the commit message, include small before/after
        notes explaining what was simplified and why.
