name: Codex 29 – Whimsical Enhancements

on:
  schedule:
    - cron: "5 6 * * *" # daily at 06:05 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  run:
    uses: ./.github/workflows/_codex-open-pr-and-ping.yml
    secrets: inherit
    with:
      pr_title: "Codex: Whimsical Enhancements"
      pr_body: "Seed PR for Codex to add an optional creative flourish that delights without breaking observability or performance."
      prompt: >
        Implement a tangible, user-facing whimsy upgrade in this run. You must deliver a 
        committed code change; "no major issues found" is not acceptable. Pick one coherent 
        surface (e.g. event overlays, birth/death celebrations, UI copy, optional themes, 
        celebratory effects, playful logging, etc.) and ship a concrete enhancement that 
        adds delight without harming observability.

        Requirements:
          • The change must introduce or upgrade an actual feature (e.g., celebratory
            particle bursts, dynamic palettes tied to ecosystem health, event-specific
            audio/visual cues, a toggleable “creative mode”, mood-based backgrounds,
            playful tooltips with contextual insights, or similar). Cosmetic copy-only edits
            are insufficient by themselves—pair them with a functional flourish.
          • Provide an opt-in control or keep the effect unobtrusive by default so serious
            analysis workflows remain unaffected.
          • Ensure performance remains strong (no heavy per-frame allocations) and visuals
            are accessible (respect colour contrast, motion sensitivity, ARIA labelling).
          • Update documentation and tests if behaviour changes, and explain how to access
            the new flourish in the PR body.
          • Do not remove existing features or reduce observability; the goal is additive
            creativity.

        If, after a thorough audit, you still cannot ship a playful enhancement, add a
        committed entry to `CHANGELOG.md` outlining at least three concrete whimsical
        improvements with implementation notes for future runs. Then exit with that
        documented plan. The expectation is that most runs ship real code, and fallback to
        documentation is a last resort.
