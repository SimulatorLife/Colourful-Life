name: Codex 35 – Core Rule Validation

on:
  schedule:
    - cron: "29 5,17 * * *" # twice daily at 05:29 and 17:29 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  run:
    uses: ./.github/workflows/_codex-open-pr-and-ping.yml
    secrets: inherit
    with:
      pr_title: "Codex: Core Rule Validation"
      pr_body: "Seed PR for Codex to audit core simulation rules and land one targeted improvement."
      prompt: >
        Review the Colourful Life codebase with the explicit goal of validating and reinforcing the core
        simulation rules:
          1) Only one organism may occupy a grid cell at any time; movement and spawning routines must
             prevent conflicts.
          2) Organisms may never teleport or be relocated discontinuously; any change in position must be
             achieved through valid movement across adjacent cells.
          3) Reproduction and child-spawning must respect required conditions: parents must occupy adjacent tiles, 
             ensure offspring spawn on empty neighbouring cells.
          4) Organisms cannot live forever—aging, decay, or other lifecycle rules must ensure every organism
             eventually dies without manual intervention.
          5) External influence systems (global buffs, forced traits, god-mode interventions) remain disabled
             by default; they should only activate when users explicitly enable them via the documented UI or
             configuration. The only excemptions are mutations and environmental effects that are part of
             normal simulation dynamics.
        Audit current implementations, documentation, and tests against these rules. Identify the highest
        leverage gap—missing or outdated docs, drift in behaviour, inadequate safeguards, or missing
        regression coverage—and deliver one focused fix. Acceptable scopes include tightening logic,
        clarifying or expanding documentation, or adding/adjusting tests. Avoid broad project-wide 
        refactors; ensure changes are targeted and justified. Clearly record investigated evidence in 
        the commit message, reference the rule(s) touched, and ensure the change keeps the project's
        performance and accessibility expectations intact.
