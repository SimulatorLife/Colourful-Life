name: Auto-merge Codex PRs

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [master]
  push:
    branches:
      - codex/**   # when Codex pushes commits to the PR branch

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  merge-if-ready:
    if: ${{ startsWith(github.event_name, 'pull_request') || startsWith(github.ref, 'refs/heads/codex/') }}
    runs-on: ubuntu-latest

    steps:
      - name: Load PR details (PR event)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        id: pr
        with:
          script: |
            core.setOutput('number', context.payload.pull_request.number.toString());

      - name: Find PR for branch (push event)
        if: ${{ github.event_name == 'push' }}
        uses: actions/github-script@v7
        id: pr_from_branch
        with:
          script: |
            const branch = context.ref.replace('refs/heads/','');
            const {data: prs} = await github.rest.pulls.list({
              owner: context.repo.owner, repo: context.repo.repo, state: 'open', head: `${context.repo.owner}:${branch}`
            });
            core.setOutput('number', prs.length ? prs[0].number.toString() : '');

      - name: Read PR
        uses: actions/github-script@v7
        id: read
        with:
          script: |
            const n = Number('${{ steps.pr.outputs.number || steps.pr_from_branch.outputs.number }}');
            if (!n) { core.setOutput('skip','true'); return; }
            const {data: pr} = await github.rest.pulls.get({ owner: context.repo.owner, repo: context.repo.repo, pull_number: n });
            core.setOutput('skip','false');
            core.setOutput('number', n.toString());
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('draft', pr.draft ? 'true' : 'false');

      - name: Merge readiness
        if: ${{ steps.read.outputs.skip != 'true' }}
        uses: actions/github-script@v7
        id: ready
        with:
          script: |
            const n = Number('${{ steps.read.outputs.number }}');
            // poll until mergeability computed
            let pr;
            for (let i=0;i<10;i++){
              const {data} = await github.rest.pulls.get({ owner: context.repo.owner, repo: context.repo.repo, pull_number: n });
              pr = data;
              if (pr.mergeable !== null) break;
              await new Promise(r=>setTimeout(r,2000));
            }
            const mergeable = !!pr.mergeable;
            const state = (pr.mergeable_state || 'unknown').toLowerCase();  // clean, unstable, dirty, blocked, behind â€¦
            const draft = !!pr.draft;

            // Accept conflict-free states: clean, unstable, has_hooks
            const allowed = ['clean','unstable','has_hooks'];
            const ready = mergeable && !draft && allowed.includes(state);

            core.notice(`mergeable=${mergeable} state=${state} draft=${draft}`);
            core.setOutput('ok', ready ? 'true' : 'false');
            core.setOutput('state', state);
            core.setOutput('head_ref', pr.head.ref);

      - name: Merge
        if: ${{ steps.ready.outputs.ok == 'true' }}
        uses: actions/github-script@v7
        id: merge
        with:
          script: |
            const n = Number('${{ steps.read.outputs.number }}');
            await github.rest.pulls.merge({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: n, merge_method: 'squash'
            });
            core.setOutput('merged','true');

      - name: Delete branch
        if: ${{ steps.merge.outputs.merged == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const ref = 'heads/${{ steps.ready.outputs.head_ref }}';
            try {
              await github.rest.git.deleteRef({ owner: context.repo.owner, repo: context.repo.repo, ref });
            } catch(e) {
              core.warning(`Branch deletion failed: ${e.message}`);
            }

      - name: Comment when not merged
        if: ${{ steps.ready.outputs.ok != 'true' && steps.read.outputs.skip != 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const n = Number('${{ steps.read.outputs.number }}');
            const state = '${{ steps.ready.outputs.state }}';
            const msg =
              state === 'dirty'   ? '@codex resolve merge conflicts while preserving master architecture/tests.' :
              state === 'behind'  ? '@codex update this branch with master, then re-run checks.' :
              state === 'blocked' ? '@codex address required checks/reviews blocking merge.' :
                                    '@codex verify merge readiness and stabilize pending checks.';
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: n, body: msg
            });
